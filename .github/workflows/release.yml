# TODO: Parameterise for each Operating System using a template

name: Production Release

on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs: 
  prepare-for-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_draft_release.outputs.upload_url }}
      tag_name: ${{ steps.tag_name.outputs.tag }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Install any dependencies
      - name: Installing npm dependencies...
        run: npm ci
      
      # Attempt a build to ensure that it can be packaged
      - name: Build artifacts
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: build
    
      # Get commit tag
      - name: Getting current tag...
        uses: dawidd6/action-get-tag@v1
        id: tag_name

      # Create draft For Release
      - name: Creating GitHub Release Draft...
        id: create_draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.tag_name.outputs.tag }}
          release_name: Release ${{ steps.tag_name.outputs.tag }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
            Bug Fixes
            - First Bug Fix
            - Second Bug Fix
          draft: true
          prerelease: false

  build-for-linux:
    runs-on: ubuntu-latest
    needs: prepare-for-release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Install any dependencies
      - name: Installing npm dependencies...
        run: npm ci

      # Pull general project build
      - name: Pulling intermediate project build...
        uses: actions/download-artifact@v2
        with:
          name: build-artifact

      # Build for Linux
      - name: Making for Linux systems...
        run: npm run make:linux
      
      # List directories for overview of build output
      - name: Listing directories...
        run: ls

      # Uploading AppImage
      - name: Uploading CentOS/Fedora/RPM-supported x32 Release...
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-for-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: out/*.AppImage
          asset_name: Vapor_Linux_${{ needs.prepare-for-release.outputs.tag_name }}.AppImage

  build-for-windows:
    runs-on: ubuntu-latest
    needs: prepare-for-release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Install any dependencies
      - name: Installing npm dependencies...
        run: npm ci

      # Pull general project build
      - name: Pulling intermediate project build...
        uses: actions/download-artifact@v2
        with:
          name: build-artifact

      # Build for Windows
      - name: Making for Windows systems...
        run: npm run make:windows
      
      # List directories for overview of build output
      - name: Listing directories...
        run: ls
      
      # Upload the production-ready executable to the GitHub Release
      - name: Uploading Window Release Assets...
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-for-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: out/*.exe
          asset_name: Vapor_Windows_${{ needs.prepare-for-release.outputs.tag_name }}.exe

  build-for-macosx:
    runs-on: macos-latest
    needs: prepare-for-release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Install any dependencies
      - name: Installing npm dependencies...
        run: npm ci

      # Pull general project build
      - name: Pulling intermediate project build...
        uses: actions/download-artifact@v2
        with:
          name: build-artifact

      # Build for MacOSX
      - name: Making for MacOSX systems...
        run: npm run make:macosx
      
      # List directories for overview of build output
      - name: Listing directories...
        run: ls
      
      # Upload the production-ready dmg to the GitHub Release
      - name: Uploading Release Assets...
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-for-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: out/*.dmg
          asset_name: Vapor_MacOSX_${{ needs.prepare-for-release.outputs.tag_name }}.dmg
