# This is a basic workflow to help you get started with Actions

name: Production Release

on:
  push:
    branches: [ master ]
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs: 
  prepare-for-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_draft_release.outputs.upload_url }}
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Install any dependencies
      - name: Installing npm dependencies...
        run: npm ci
      
      # Attempt a build to ensure that it can be packaged
      - name: Building...
        run: npm run build

      # Create draft For Release
      - name: Creating GitHub Release Draft...
        id: create_draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false

  build-for-linux:
    runs-on: ubuntu-latest
    needs: prepare-for-release

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Set up Node.js
      - name: Setting up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'

      # Install any dependencies
      - name: Installing npm dependencies...
        run: npm ci

      # Build for Linux
      - name: Making for Linux systems...
        run: npm run make:linux

      # Zip files
      - name: Zipping...
        run: zip -j VaporLinux${{ github.ref }}.zip out/make
      
      # Upload the production-ready executables to the GitHub Release
      - name: Uploading Release Assets...
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare-for-release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./VaporLinux${{ github.ref }}.zip
          asset_name: Vapor_Linux_${{ github.ref }}.zip
          asset_content_type: application/zip
